ARG CUDA_VERSION
ARG UBUNTU_VERSION

FROM ubuntu:24.04

ARG DEBIAN_FRONTEND=noninteractive
ENV LANGUAGE=en_US.UTF-8
ENV LANG=en_US.UTF-8

ARG INSTALL_LLVM
ARG INSTALL_RUST
ARG INSTALL_TORCH
ARG LLVM_VERSION
ARG IMAGE_VERSION
ARG TORCH_VERSION

LABEL maintainer="JamesNULLiu jamesnulliu@gmail.com"
LABEL version=${IMAGE_VERSION}

SHELL ["/bin/bash", "-c"]

# Some basic tools
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y \
    apt-utils lsb-release software-properties-common gnupg git \
    vim-gtk3 wget p7zip-full ninja-build curl jq pkg-config ssh \
    build-essential gdb htop tmux ttf-mscorefonts-installer kmod \
    libssl-dev && \
    fc-cache -f -v

# Vcpkg
RUN cd /usr/local && git clone https://github.com/microsoft/vcpkg.git && \ 
    cd vcpkg && ./bootstrap-vcpkg.sh 

# CMake
RUN wget -O /tmp/kitware-archive.sh \
    https://apt.kitware.com/kitware-archive.sh && \
    bash /tmp/kitware-archive.sh && \
    apt-get update && apt-get install -y cmake 

# LLVM
RUN if [[ "${INSTALL_LLVM}" == "true" ]]; then \
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | \
            tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc && \
        echo "deb http://apt.llvm.org/noble/ llvm-toolchain-noble main" | \
            tee /etc/apt/sources.list.d/llvm.list && \
        echo "deb-src http://apt.llvm.org/noble/ llvm-toolchain-noble main" | \
            tee -a /etc/apt/sources.list.d/llvm.list && \
        apt-get update && apt-get install -y \
            clang-${LLVM_VERSION}         lldb-${LLVM_VERSION} \
            clang-tools-${LLVM_VERSION}   libclang-${LLVM_VERSION}-dev \
            clang-format-${LLVM_VERSION}  python3-clang-${LLVM_VERSION} \
            clangd-${LLVM_VERSION}        clang-tidy-${LLVM_VERSION} \
            lldb-${LLVM_VERSION}          libc++-${LLVM_VERSION}-dev \
            libc++abi-${LLVM_VERSION}-dev libomp-${LLVM_VERSION}-dev && \
        ln -s /usr/bin/clang-${LLVM_VERSION} /usr/bin/clang && \
        ln -s /usr/bin/clang++-${LLVM_VERSION} /usr/bin/clang++ && \
        ln -s /usr/bin/clangd-${LLVM_VERSION} /usr/bin/clangd && \
        ln -s /usr/bin/clang-tidy-${LLVM_VERSION} /usr/bin/clang-tidy && \
        ln -s /usr/bin/clang-format-${LLVM_VERSION} /usr/bin/clang-format && \
        ln -s /usr/bin/lldb-${LLVM_VERSION} /usr/bin/lldb \
    ; fi

# Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

# Config files
COPY data/.vimrc data/.inputrc data/.bashrc data/.tmux.conf /root/

# Install Miniconda3 and conda env
RUN wget -O /tmp/miniconda3.sh \
    https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
    mkdir -p /root/miniconda3 && \
    bash /tmp/miniconda3.sh -b -u -p /root/miniconda3 && \
    \. /root/miniconda3/bin/activate && \
    conda upgrade libstdcxx-ng -c conda-forge -y && \
    pip3 install nvitop --no-cache-dir && \
    if [[ "${INSTALL_TORCH}" == "true" ]]; then \
        TORCH_CU_VER=$(echo $CUDA_VERSION | cut -d'.' -f1,2 | tr -d '.') && \
        pip3 install torch==${TORCH_VERSION} torchvision torchaudio \
            --index-url https://download.pytorch.org/whl/cpu \
            --no-cache-dir \
    ; fi

# Some final steps
RUN apt-get update && apt-get upgrade -y && apt-get autoremove -y && \
    apt-get clean && rm -rf /var/lib/apt/lists/* && \
    git config --system --unset-all user.name || true && \
    git config --system --unset-all user.email || true && \
    git config --global --unset-all user.name || true && \
    git config --global --unset-all user.email || true
